{"ast":null,"code":"const User = require('../models/user-models');\nconst bcrypt = require('bcryptjs');\nmodule.exports = {\n  async findByEmail(email) {\n    return await User.findOne({\n      where: {\n        email\n      }\n    });\n  },\n  async findById(nik) {\n    return await User.findByPk(nik, {\n      attributes: ['nik', 'name', 'email', 'photo', 'position', 'phone_number']\n    });\n  },\n  async createUser({\n    nik,\n    name,\n    email,\n    password,\n    position,\n    role,\n    username,\n    phone_number\n  }) {\n    const hashed = bcrypt.hashSync(password, 10);\n    return await User.create({\n      nik,\n      name,\n      email,\n      username,\n      password: hashed,\n      position,\n      role,\n      phone_number\n    });\n  },\n  async updateUser(nik, {\n    phone_number,\n    photo,\n    password\n  }) {\n    const user = await User.findByPk(nik);\n    if (!user) throw new Error('User tidak ditemukan');\n    if (phone_number) user.phone_number = phone_number;\n    if (photo) user.photo = photo;\n    if (password) user.password = bcrypt.hashSync(password, 10);\n    await user.save();\n    return user;\n  }\n};","map":{"version":3,"names":["User","require","bcrypt","module","exports","findByEmail","email","findOne","where","findById","nik","findByPk","attributes","createUser","name","password","position","role","username","phone_number","hashed","hashSync","create","updateUser","photo","user","Error","save"],"sources":["C:/Users/10/Documents/Frontend/src/pages/employee/create-employee.jsx"],"sourcesContent":["const User = require('../models/user-models');\r\nconst bcrypt = require('bcryptjs');\r\n\r\nmodule.exports = {\r\n    async findByEmail(email){\r\n        return await User.findOne({ where: {email}});\r\n    },\r\n\r\n    async findById(nik){\r\n        return await User.findByPk(nik,{\r\n            attributes:['nik','name','email','photo','position','phone_number']\r\n        })\r\n    },\r\n\r\n    async createUser({nik,name,email,password,position,role,username,phone_number}){\r\n        const hashed = bcrypt.hashSync(password,10);\r\n        return await User.create({nik,name,email,username,password: hashed,position,role,phone_number});\r\n    },\r\n\r\n    async updateUser (nik, {phone_number,photo,password}){\r\n        const user = await User.findByPk(nik);\r\n        if (!user) throw new Error('User tidak ditemukan');\r\n         if (phone_number) user.phone_number = phone_number;\r\n    if (photo) user.photo = photo;\r\n    if (password) user.password = bcrypt.hashSync(password, 10);\r\n    await user.save();\r\n    return user;\r\n    }\r\n}\r\n\r\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAC7C,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAU,CAAC;AAElCE,MAAM,CAACC,OAAO,GAAG;EACb,MAAMC,WAAWA,CAACC,KAAK,EAAC;IACpB,OAAO,MAAMN,IAAI,CAACO,OAAO,CAAC;MAAEC,KAAK,EAAE;QAACF;MAAK;IAAC,CAAC,CAAC;EAChD,CAAC;EAED,MAAMG,QAAQA,CAACC,GAAG,EAAC;IACf,OAAO,MAAMV,IAAI,CAACW,QAAQ,CAACD,GAAG,EAAC;MAC3BE,UAAU,EAAC,CAAC,KAAK,EAAC,MAAM,EAAC,OAAO,EAAC,OAAO,EAAC,UAAU,EAAC,cAAc;IACtE,CAAC,CAAC;EACN,CAAC;EAED,MAAMC,UAAUA,CAAC;IAACH,GAAG;IAACI,IAAI;IAACR,KAAK;IAACS,QAAQ;IAACC,QAAQ;IAACC,IAAI;IAACC,QAAQ;IAACC;EAAY,CAAC,EAAC;IAC3E,MAAMC,MAAM,GAAGlB,MAAM,CAACmB,QAAQ,CAACN,QAAQ,EAAC,EAAE,CAAC;IAC3C,OAAO,MAAMf,IAAI,CAACsB,MAAM,CAAC;MAACZ,GAAG;MAACI,IAAI;MAACR,KAAK;MAACY,QAAQ;MAACH,QAAQ,EAAEK,MAAM;MAACJ,QAAQ;MAACC,IAAI;MAACE;IAAY,CAAC,CAAC;EACnG,CAAC;EAED,MAAMI,UAAUA,CAAEb,GAAG,EAAE;IAACS,YAAY;IAACK,KAAK;IAACT;EAAQ,CAAC,EAAC;IACjD,MAAMU,IAAI,GAAG,MAAMzB,IAAI,CAACW,QAAQ,CAACD,GAAG,CAAC;IACrC,IAAI,CAACe,IAAI,EAAE,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACjD,IAAIP,YAAY,EAAEM,IAAI,CAACN,YAAY,GAAGA,YAAY;IACvD,IAAIK,KAAK,EAAEC,IAAI,CAACD,KAAK,GAAGA,KAAK;IAC7B,IAAIT,QAAQ,EAAEU,IAAI,CAACV,QAAQ,GAAGb,MAAM,CAACmB,QAAQ,CAACN,QAAQ,EAAE,EAAE,CAAC;IAC3D,MAAMU,IAAI,CAACE,IAAI,CAAC,CAAC;IACjB,OAAOF,IAAI;EACX;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}